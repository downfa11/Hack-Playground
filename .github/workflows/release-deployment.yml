name: Production Release Pipeline

# 향후 릴리즈 이벤트 기반으로 운영 환경을 배포하고자 함
# 아직은 PR Merge에 대해서 EC2에 도커라이징하고 있지만, 규모가 커지면 ArgoCD GitOps로 이전할 계획

on:
  release:
    types: [ published ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  APP_IMAGE_NAME: solve
  
jobs:
  deploy-to-production:
    name: Deploy to Production Environment
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Release Tag for Docker Image
        id: get_version
        run: echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (versioned tag for Production)
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }} 
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to EC2 Production Environment via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_PRODUCTION_HOST }} 
          username: ${{ secrets.EC2_PRODUCTION_USER }}
          key: ${{ secrets.EC2_PRODUCTION_SSH_KEY }}
          debug: true
          script: |
            RELEASE_VERSION="${{ steps.get_version.outputs.VERSION }}"
            IMAGE_FULL_TAG="${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:$RELEASE_VERSION"
            echo "Deploying release $RELEASE_VERSION to Production EC2 at $(date)"
            
            docker pull "$IMAGE_FULL_TAG"
            sed -i "s|image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:.*|image: $IMAGE_FULL_TAG|" docker-compose.yml
            docker compose up -d --no-deps --scale ${{ env.APP_IMAGE_NAME }}=1 --timeout 10 
            
            echo "Deployment of release $RELEASE_VERSION to Production EC2 complete."
